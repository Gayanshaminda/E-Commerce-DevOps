- name: Deploy to EC2
  hosts: all
  become: yes
  vars:
    ansible_ssh_timeout: 60  # Set SSH timeout

  tasks:

    # Step 1: Update packages
    - name: Update Packages
      apt:
        update_cache: yes
      retries: 3
      delay: 5
      register: update_result
      until: update_result is success

    # Step 2: Install required dependencies for Docker installation
    - name: Install required dependencies
      apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - software-properties-common
        state: present
      retries: 3
      delay: 5
      register: install_deps
      until: install_deps is success

    # Step 3: Add Docker's official GPG key
    - name: Add Docker's official GPG key
      shell: |
        curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
      retries: 3
      delay: 5
      register: docker_key
      until: docker_key is success

    # Step 4: Add Docker repository
    - name: Add Docker repository
      shell: |
        add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
      retries: 3
      delay: 5
      register: add_docker_repo
      until: add_docker_repo is success

    # Step 5: Install Docker CE
    - name: Install Docker CE
      apt:
        name: docker-ce
        state: present
      retries: 3
      delay: 5
      register: install_docker
      until: install_docker is success

    # Step 6: Install Docker Compose
    - name: Install Docker Compose
      get_url:
        url: "https://github.com/docker/compose/releases/latest/download/docker-compose-{{ ansible_system }}-{{ ansible_machine }}"
        dest: "/usr/local/bin/docker-compose"
        mode: '0755'
      retries: 3
      delay: 5
      register: install_compose
      until: install_compose is success

    # Step 7: Ensure Docker service is running
    - name: Ensure Docker service is running
      service:
        name: docker
        state: started
        enabled: yes
      retries: 3
      delay: 5
      register: docker_service
      until: docker_service is success

    # Step 8: Create directories for app
    - name: Create app directories
      file:
        path: "{{ item }}"
        state: directory
      loop:
        - /home/ubuntu/app
        - /home/ubuntu/app/backend
        - /home/ubuntu/app/frontend

    # Step 9: Copy project files to EC2
    - name: Copy backend directory
      synchronize:
        src: /mnt/d/MY PROJECTS/E-Commerce-DevOps/backend/
        dest: /home/ubuntu/app/backend/
        mode: push

    - name: Copy frontend directory
      synchronize:
        src: /mnt/d/MY PROJECTS/E-Commerce-DevOps/frontend/
        dest: /home/ubuntu/app/frontend/
        mode: push

    - name: Copy docker-compose.yml file to EC2
      copy:
        src: /mnt/d/MY PROJECTS/E-Commerce-DevOps/docker-compose.yml
        dest: /home/ubuntu/app/docker-compose.yml

    # Step 10: Run Docker Compose to deploy containers
    - name: Run Docker Compose to deploy containers
      community.docker.docker_compose_v2:
        project_src: /home/ubuntu/app
        state: present
      retries: 3
      delay: 5
