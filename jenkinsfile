pipeline {
    agent any
    environment {
        DOCKER_COMPOSE_FILE = 'docker-compose.yml'
        TERRAFORM_DIR = 'terraform'
        ANSIBLE_DIR = 'ansible'
        AWS_REGION = 'eu-north-1'
        EC2_IP = '51.20.34.253'
    }
    stages {
        stage('Checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/Gayanshaminda/E-Commerce-DevOps.git'
            }
        }
        stage('Build Docker Images with Docker Compose') {
            steps {
                sh "docker-compose -f ${DOCKER_COMPOSE_FILE} build"
            }
        }
        stage('Push Docker Images') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'docker-hub-credentials', 
                        usernameVariable: 'DOCKER_HUB_USERNAME', passwordVariable: 'DOCKER_HUB_PASSWORD')]) {
                        sh "echo \$DOCKER_HUB_PASSWORD | docker login -u \$DOCKER_HUB_USERNAME --password-stdin"
                        def gitCommitHash = sh(script: 'git rev-parse --short HEAD', returnStdout: true).trim()
                        sh "docker tag mern-ecommerce-ci-frontend \$DOCKER_HUB_USERNAME/frontend:${gitCommitHash}"
                        sh "docker tag mern-ecommerce-ci-backend \$DOCKER_HUB_USERNAME/backend:${gitCommitHash}"
                        sh "docker push \$DOCKER_HUB_USERNAME/frontend:${gitCommitHash}"
                        sh "docker push \$DOCKER_HUB_USERNAME/backend:${gitCommitHash}"
                    }
                }
            }
        }
        stage('Terraform Infrastructure') {
            steps {
                dir(TERRAFORM_DIR) {
                    withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', 
                        credentialsId: 'aws-credentials', 
                        accessKeyVariable: 'AWS_ACCESS_KEY_ID', 
                        secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']]) {
                        sh 'terraform init'
                        sh "terraform apply -auto-approve -var=\"region=${AWS_REGION}\""
                    }
                }
            }
        }
        stage('Ansible Deployment') {
            steps {
                dir(ANSIBLE_DIR) {
                    withCredentials([sshUserPrivateKey(credentialsId: 'ec2-ssh-key', 
                        keyFileVariable: 'SSH_KEY', 
                        usernameVariable: 'SSH_USER'),
                    usernamePassword(credentialsId: 'docker-hub-credentials', 
                        usernameVariable: 'DOCKER_HUB_USERNAME', passwordVariable: 'DOCKER_HUB_PASSWORD')]) {
                        script {
                            def gitCommitHash = sh(script: 'git rev-parse --short HEAD', returnStdout: true).trim()
                            sh "ansible-playbook -i inventory.ini deploy.yml -u \$SSH_USER --private-key \$SSH_KEY -e \"ansible_host=${EC2_IP} DOCKER_HUB_USERNAME=\$DOCKER_HUB_USERNAME GIT_COMMIT_HASH=${gitCommitHash}\""
                        }
                    }
                }
            }
        }
    }
    post {
        always {
            cleanWs()
            sh 'docker logout'
        }
    }
}