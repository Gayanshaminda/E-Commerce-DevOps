pipeline {
    agent any
    environment {
        DOCKER_COMPOSE_FILE = 'docker-compose.yml'
        TERRAFORM_DIR = 'terraform'
        ANSIBLE_DIR = 'ansible'
        AWS_REGION = 'eu-north-1'
        WORKSPACE = 'C:\\ProgramData\\Jenkins\\.jenkins\\workspace\\E-Commerce-DevOps-Pipeline'
        NO_PROXY = '*.docker.io,registry-1.docker.io'
        WSL_SSH_KEY = '/home/gayanshaminda2001/ansible/E-commerece-key-pair.pem'
    }
    stages {
        stage('Checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/Gayanshaminda/E-Commerce-DevOps.git'
            }
        }
        stage('Build Docker Images with Docker Compose') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'docker-hub-credentials',
                         usernameVariable: 'DOCKER_HUB_USERNAME', passwordVariable: 'DOCKER_HUB_PASSWORD')]) {
                        def gitCommitHash = bat(script: 'git rev-parse --short HEAD', returnStdout: true).trim().readLines().last()
                        
                        // Create a .env file for Docker Compose
                        writeFile file: '.env', text: "DOCKER_HUB_USERNAME=${DOCKER_HUB_USERNAME}\nGIT_COMMIT_HASH=${gitCommitHash}"
                        
                        // Use the .env file with docker-compose
                        bat "docker-compose -f ${DOCKER_COMPOSE_FILE} build"
                    }
                }
            }
        }
        stage('Push Docker Images') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'docker-hub-credentials',
                         usernameVariable: 'DOCKER_HUB_USERNAME', passwordVariable: 'DOCKER_HUB_PASSWORD')]) {
                        def gitCommitHash = bat(script: 'git rev-parse --short HEAD', returnStdout: true).trim().readLines().last()
                        
                        // Configure Docker to bypass proxy for Docker Hub
                        bat '''
                            echo {"proxies":{"default":{"httpProxy":"","httpsProxy":"","noProxy":"*.docker.io,registry-1.docker.io"}}} > %USERPROFILE%\\.docker\\config.json
                        '''
                        
                        // Login to Docker Hub
                        bat "echo %DOCKER_HUB_PASSWORD% | docker login -u %DOCKER_HUB_USERNAME% --password-stdin"
                        
                        // Push images with retry mechanism
                        retry(3) {
                            bat "docker push %DOCKER_HUB_USERNAME%/frontend:${gitCommitHash}"
                        }
                        
                        retry(3) {
                            bat "docker push %DOCKER_HUB_USERNAME%/backend:${gitCommitHash}"
                        }
                    }
                }
            }
        }
        stage('Terraform Infrastructure') {
            steps {
                dir(TERRAFORM_DIR) {
                    withCredentials([[$class: 'AmazonWebServicesCredentialsBinding',
                         credentialsId: 'aws-credentials',
                         accessKeyVariable: 'AWS_ACCESS_KEY_ID',
                         secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']]) {
                        bat "wsl terraform init"
                        bat "wsl terraform apply -auto-approve -var=\"region=${AWS_REGION}\""
                        
                        // Capture the EC2 IP from Terraform output - fixed command
                        script {
                            env.EC2_IP = bat(script: 'wsl terraform output -raw public_ip', returnStdout: true).trim().readLines().last()
                        }
                    }
                }
            }
        }
        stage('Ansible Deployment') {
            steps {
                dir(ANSIBLE_DIR) {
                    script {
                        // Create directories if they don't exist
                        bat '''
                            if not exist ansible mkdir ansible
                            wsl mkdir -p /home/gayanshaminda2001/ansible
                        '''
                        
                        // Set proper permissions on existing key
                        bat '''
                            wsl chmod 600 /home/gayanshaminda2001/ansible/E-commerece-key-pair.pem
                            wsl ls -la /home/gayanshaminda2001/ansible/E-commerece-key-pair.pem
                        '''

                        withCredentials([
                            usernamePassword(credentialsId: 'docker-hub-credentials',
                                         usernameVariable: 'DOCKER_HUB_USERNAME',
                                         passwordVariable: 'DOCKER_HUB_PASSWORD')
                        ]) {
                            def gitCommitHash = bat(script: 'wsl git rev-parse --short HEAD', returnStdout: true).trim().readLines().last()
                            
                            // Create inventory file
                            writeFile file: 'temp_inventory.ini', text: """[ec2]
${env.EC2_IP} ansible_user=ubuntu ansible_ssh_private_key_file=${WSL_SSH_KEY}

[ec2:vars]
ansible_python_interpreter=/usr/bin/python3
ansible_ssh_common_args='-o StrictHostKeyChecking=no'
"""
                            // Run Ansible playbook
                            def result = bat(
                                script: "wsl ansible-playbook -i temp_inventory.ini deploy.yml -u ubuntu --private-key ${WSL_SSH_KEY} -e \"DOCKER_HUB_USERNAME=${DOCKER_HUB_USERNAME} GIT_COMMIT_HASH=${gitCommitHash}\" -vvv",
                                returnStatus: true
                            )
                            
                            if (result != 0) {
                                error "Ansible deployment failed with exit code ${result}"
                            }
                        }
                    }
                }
            }
        }
    }
    post {
        always {
            script {
                bat 'docker logout'
                try {
                    cleanWs(
                        deleteDirs: true,
                        patterns: [[pattern: '**/.git/**', type: 'EXCLUDE']]
                    )
                } catch (Exception e) {
                    echo "Warning: Workspace cleanup failed: ${e.getMessage()}"
                }
            }
        }
        success {
            echo 'Deployment completed successfully!'
        }
        failure {
            echo 'Deployment failed!'
        }
    }
}