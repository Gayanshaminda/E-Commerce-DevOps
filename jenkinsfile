pipeline {
    agent any
    environment {
        DOCKER_COMPOSE_FILE = 'docker-compose.yml'
        TERRAFORM_DIR = 'terraform'
        ANSIBLE_DIR = 'ansible'
        AWS_REGION = 'eu-north-1'
        EC2_IP = '' // Remove the hardcoded IP
        WORKSPACE = 'C:\\ProgramData\\Jenkins\\.jenkins\\workspace\\E-Commerce-DevOps-Pipeline'
        // Disable proxy for Docker operations
        NO_PROXY = '*.docker.io,registry-1.docker.io'
    }
    stages {
        stage('Checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/Gayanshaminda/E-Commerce-DevOps.git'
            }
        }
        stage('Build Docker Images with Docker Compose') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'docker-hub-credentials',
                         usernameVariable: 'DOCKER_HUB_USERNAME', passwordVariable: 'DOCKER_HUB_PASSWORD')]) {
                        def gitCommitHash = bat(script: 'git rev-parse --short HEAD', returnStdout: true).trim().readLines().last()
                        
                        // Create a .env file for Docker Compose
                        writeFile file: '.env', text: "DOCKER_HUB_USERNAME=${DOCKER_HUB_USERNAME}\nGIT_COMMIT_HASH=${gitCommitHash}"
                        
                        // Use the .env file with docker-compose
                        bat "docker-compose -f ${DOCKER_COMPOSE_FILE} build"
                    }
                }
            }
        }
        stage('Push Docker Images') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'docker-hub-credentials',
                         usernameVariable: 'DOCKER_HUB_USERNAME', passwordVariable: 'DOCKER_HUB_PASSWORD')]) {
                        def gitCommitHash = bat(script: 'git rev-parse --short HEAD', returnStdout: true).trim().readLines().last()
                        
                        // Configure Docker to bypass proxy for Docker Hub
                        bat '''
                            echo {"proxies":{"default":{"httpProxy":"","httpsProxy":"","noProxy":"*.docker.io,registry-1.docker.io"}}} > %USERPROFILE%\\.docker\\config.json
                        '''
                        
                        // Login to Docker Hub
                        bat "echo %DOCKER_HUB_PASSWORD% | docker login -u %DOCKER_HUB_USERNAME% --password-stdin"
                        
                        // Push images with retry mechanism
                        retry(3) {
                            bat "docker push %DOCKER_HUB_USERNAME%/frontend:${gitCommitHash}"
                        }
                        
                        retry(3) {
                            bat "docker push %DOCKER_HUB_USERNAME%/backend:${gitCommitHash}"
                        }
                    }
                }
            }
        }
        stage('Terraform Infrastructure') {
            steps {
                dir(TERRAFORM_DIR) {
                    withCredentials([[$class: 'AmazonWebServicesCredentialsBinding',
                         credentialsId: 'aws-credentials',
                         accessKeyVariable: 'AWS_ACCESS_KEY_ID',
                         secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']]) {
                        bat "wsl terraform init"
                        script {
                            def tfOutput = bat(script: 'wsl terraform apply -auto-approve -var=\"region=${AWS_REGION}\"', returnStdout: true).trim()
                            EC2_IP = bat(script: 'wsl terraform output -raw public_ip', returnStdout: true).trim()
                        }
                    }
                }
            }
        }
        stage('Ansible Deployment') {
            steps {
                dir(ANSIBLE_DIR) {
                    withCredentials([sshUserPrivateKey(credentialsId: 'ec2-ssh-key',
                         keyFileVariable: 'SSH_KEY',
                         usernameVariable: 'SSH_USER'),
                    usernamePassword(credentialsId: 'docker-hub-credentials',
                         usernameVariable: 'DOCKER_HUB_USERNAME', passwordVariable: 'DOCKER_HUB_PASSWORD')]) {
                        script {
                            // Add debug steps
                            bat "wsl chmod 600 ${SSH_KEY}"
                            bat "wsl ssh-keyscan -H ${EC2_IP} >> ~/.ssh/known_hosts"
                            
                            def gitCommitHash = bat(script: 'wsl git rev-parse --short HEAD', returnStdout: true).trim().readLines().last()
                            bat """
                                wsl ansible-playbook -i inventory.ini deploy.yml \
                                -u %SSH_USER% \
                                --private-key %SSH_KEY% \
                                -e "ansible_host=${EC2_IP} DOCKER_HUB_USERNAME=%DOCKER_HUB_USERNAME% GIT_COMMIT_HASH=${gitCommitHash}" \
                                -vvv
                            """
                        }
                    }
                }
            }
        }
    }
    post {
        always {
            cleanWs()
            bat 'docker logout'
        }
    }
}